'use strict';

require('./cssModulesHook');

// React Universal tools and components
const React = require('react');
const createElement = React.createElement;
const ReactDOM = require('react-dom/server');
const renderToString = ReactDOM.renderToString;
const { Provider } = require('react-redux');
const { StaticRouter } = require('react-router');

// ApolloClient
const { ApolloProvider } = require('react-apollo');
const createApolloClient = require('../../../client/core/createApolloClient.server').default;
const schema = require('../../graphql/schema');

// Material-UI SSR Setup
const initMaterialUi = require('./initMaterialUi');
const { JssProvider } = require('react-jss');
const { MuiThemeProvider } = require('material-ui/styles');

const configureStore = require('../../../client/store/configureStore').default;
const App = require('../../../client/components/App').default;
const Html = require('../../../client/components/Html').default;
const clientConfig = require('../../../client/config').default;

// Assets file generated by webpack
const assets = require('../../../build/assets.json');

// Render React UI from the server
const serverSideRender = (req, res, next) => {
  try {
    const store = configureStore({});

    const apolloClient = createApolloClient({
      schema,
      rootValue: { request: req }
    });

    const context = {
      // You can access redux through react-redux connect
      store,
      storeSubscription: null,
      // Apollo Client for use with react-apollo
      client: apolloClient
    };

    let status = 200;
    if (context.url) {
      status = 302;
      req.originalUrl = context.url;
    }
    if (context.status === '404') {
      status = 404;
    }

    const { sheetsRegistry, generateClassName, theme } = initMaterialUi();

    const app = renderToString(
      createElement(
        ApolloProvider,
        { client: apolloClient },
        createElement(
          Provider,
          { store },
          createElement(
            StaticRouter,
            { location: req.originalUrl, context },
            createElement(
              JssProvider,
              { registry: sheetsRegistry, generateClassName },
              createElement(
                MuiThemeProvider,
                { theme, sheetsManager: new Map() },
                createElement(App, {})
              )
            )
          )
        )
      )
    );

    // Grab the CSS from our sheetsRegistry.
    const jss = sheetsRegistry.toString();

    // Send the rendered page back to the client.
    res.status(status);
    res.send(`<!doctype html>${ReactDOM.renderToStaticMarkup(
      createElement(Html, {
        title: clientConfig.app.title,
        description: clientConfig.app.description,
        favicon: '',
        styles: [assets.client.css],
        scripts: [assets.vendor.js, assets.client.js],
        state: store.getState(),
        apolloState: context.client.extract(),
        jss: jss,
        children: app
      })
    )}`);
  } catch (err) {
    next(err);
  }
};

module.exports = serverSideRender;
